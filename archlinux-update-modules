#!/usr/bin/env bash

# helper functions
msg() {
    echo "> $*" >&2
}

ask() {
    read -p "==> $* [y/N] " -n 1 REPLY
    echo >&2
    if [[ "$REPLY" =~ [yY] ]] ; then
        return 0
    else
        return 1
    fi
}

ask_command() {
    local question="$1"
    shift
    if ask "$question"$'\n'":: $* " ; then
        "$@" || exit 1
    fi
}

cmd="$0"
usage() {
cat <<EOF
Usage: $0 [--dont-ask]

This script manages /usr/lib/modules on arch linux. Just run this script
whenever you like, e.g. after an upgrade or after rebooting, in order to keep
/usr/lib/modules in a sensible state.

When being run the following tasks are done:

1. The modules directory for the running kernel is restored from the pacman cache.

2. Any old obsolete module directories are removed. Obosolete directories are
those that are neither used by the running kernel nor managed by pacman itself.

The user is asked before each filesystem change, i.e. before each sudo-command,
unless --dont-ask is passed. Please run this script as an ordinary user.
EOF
}

set -e
set -o pipefail
set -u
shopt -s nullglob

if [[ "$#" -gt 0 ]] ; then
    case "$1" in
        -h|--help|-help)
            usage
            exit 0
            ;;
        --dont-ask)
            ask() {
                echo "==> $* => Yes"
            }
            ;;
        *)
            echo "Error: unknown option \"$1\"" >&2
            usage >&2
            exit 1
            ;;
    esac
fi

architecture=$(uname -m)
kernel_release=$(uname -r)
# kernel_release=4.14.31-1-lts # only for testing
# kernel_release=5.1.9-arch1-1-ARCH  # only for testing
# kernel_release=5.1.10-1-ck-haswell # only for testing


pkg_ver=$(echo "${kernel_release}" | grep -Po ".+-\d+") # split version number from name
pkg_suffix=${kernel_release/${pkg_ver}/}

if [ "$pkg_suffix" == "-ARCH" ]; then
    pkg_name="linux"
else
    pkg_name="linux${pkg_suffix}"
fi

pkg_ver="${pkg_ver/-arch/.arch}" # it's .arch in the package version but -arch in the uname output

msg "Running kernel package: name=${pkg_name} version=${pkg_ver} architecture=${architecture}"

# find a pkg file with the modules for the running system
pkgfile=(/var/cache/pacman/pkg/"${pkg_name}"-"${pkg_ver}"-"${architecture}".pkg.tar.zst)
running_moddir="/usr/lib/modules/${kernel_release}"

# == restore module directory for current path ==
# check whether a modules directory exists for the running system
if [[ ! -d "$running_moddir" ]] ; then
    msg "The module directory $running_moddir"
    msg "for the running kernel ${kernel_release} does not exist."
    if [[ ! -e "${pkgfile}" ]] ; then
      pushd /var/cache/pacman/pkg
      msg "Package missing, trying to fetch from archive.archlinux.org"
      wget "https://archive.archlinux.org/packages/l/linux/${pkgfile}"
      popd
    fi
    if [[ ! -e "${pkgfile}" ]] ; then
        msg "But the package does not exist: ${pkgfile}"
    else
        # the moddir path needs to be relative, so no leading /
        ask_command "Do you want to restore it from ${pkgfile}?" \
            sudo tar -C / -xvf "${pkgfile}" "${running_moddir#/}"
    fi
else
    msg "The running kernel ${kernel_release} already has a module directory $running_moddir, nothing to do"
fi

# == clean up old module directories ==
# get all old module dirs and save them in an array
mapfile -t old_module_dirs < <(
    # list all entries in /usr/lib/modules (find)
    # then ignore the directory of the running kernel (grep)
    # then restrict to all directories not owned by any package (pacman)
    # then remove anything before the file path (sed) and hope that the pacman
    # message does not change too often, such that the file path remains
    # just to be sure, we filter for paths finally (grep)
    find /usr/lib/modules -mindepth 1 -maxdepth 1 -printf "%p\n" \
        | grep -v "/usr/lib/modules/${kernel_release}" \
        | { LC_ALL=C pacman --color never -Qoq - 2>&1 > /dev/null ; } \
        | sed 's,[^/]*,,' \
        | grep '^/usr/lib/modules/'
)

msg "${#old_module_dirs[@]} old directories in /usr/lib/modules"
for olddir in "${old_module_dirs[@]}" ; do
    # ensure that $olddir is really only a subdirectory of /usr/lib/modules
    ask_command "Remove old module dir $olddir?" \
        sudo rm -rf "/usr/lib/modules/${old_module_dirs#/usr/lib/modules/}"
done

